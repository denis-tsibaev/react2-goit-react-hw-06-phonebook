{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.module.css","components/ContactItem/ContactItem.module.css","components/Filter/Filter.module.css","components/Section/Section.module.css","redux/actions.js","components/ContactForm/ContactForm.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","components/Section/Section.jsx","redux/selectors.js","App.js","redux/reducers.js","redux/store.js","index.js"],"names":["module","exports","addContact","createAction","name","number","payload","id","shortid","generate","deleteContact","contactId","filterContacts","contact","ContactForm","useState","setName","setNumber","dispatch","useDispatch","contacts","useSelector","state","handleInputChange","event","target","value","onSubmit","preventDefault","find","toLowerCase","toast","error","autoComplete","className","style","inputName","onChange","type","placeholder","pattern","title","required","inputNumber","formButton","autoClose","ContactItem","onDelete","onClick","deleteBtn","ContactList","onDeleteContact","orderList","map","contactListItem","Filter","onFilterChange","filterInput","Section","children","section","getFilter","filteredContacts","getFilteredContacts","getContacts","normalizedFilteredName","filter","includes","App","createReducer","action","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","contactReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.bd7cfe53.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputName\":\"ContactForm_inputName__qxUPI\",\"inputNumber\":\"ContactForm_inputNumber__gZvq1\",\"formButton\":\"ContactForm_formButton__2w-vZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"orderList\":\"ContactList_orderList__1MbD7\",\"contactListItem\":\"ContactList_contactListItem__o91iI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"deleteBtn\":\"ContactItem_deleteBtn__aD5Xq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterInput\":\"Filter_filterInput__3__qy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__1_Sx-\"};","import { createAction } from '@reduxjs/toolkit';\r\nimport shortid from 'shortid';\r\n\r\nconst addContact = createAction('contactList/add', (name, number) => ({\r\n    payload: {\r\n        id: shortid.generate(),\r\n        name,\r\n        number,\r\n    },\r\n}));\r\n\r\nconst deleteContact = createAction('contactList/delete', contactId => ({\r\n    payload: contactId,\r\n}));\r\n\r\nconst filterContacts = createAction('contactList/filter', contact => ({\r\n    payload: contact,\r\n}));\r\n\r\nexport { addContact, deleteContact, filterContacts };\r\n","import PropTypes from 'prop-types';\r\nimport { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { toast, ToastContainer } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { addContact } from '../../redux/actions';\r\nimport style from './ContactForm.module.css';\r\n\r\nconst ContactForm = () => {\r\n    const [name, setName] = useState('');\r\n    const [number, setNumber] = useState('');\r\n    const dispatch = useDispatch();\r\n    const contacts = useSelector(state => state.contacts.contacts);\r\n\r\n    const handleInputChange = event => {\r\n        const { name, value } = event.target;\r\n        if (name === 'name') setName(value);\r\n        if (name === 'number') setNumber(value);\r\n    };\r\n\r\n    const handleSubmit = event => {\r\n        event.preventDefault();\r\n        const doubleContact = contacts.find(\r\n            contact => contact.name.toLowerCase() === name.toLowerCase(),\r\n        );\r\n\r\n        if (doubleContact) {\r\n            toast.error(`${name} is already in contacts`);\r\n            return;\r\n        }\r\n\r\n        dispatch(addContact(name, number));\r\n        setName('');\r\n        setNumber('');\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit} autoComplete=\"off\">\r\n            <div>\r\n                <label>\r\n                    Name\r\n                    <input\r\n                        className={style.inputName}\r\n                        onChange={handleInputChange}\r\n                        type=\"text\"\r\n                        name=\"name\"\r\n                        value={name}\r\n                        placeholder=\"text here\"\r\n                        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                        required\r\n                    />\r\n                </label>\r\n            </div>\r\n            <div>\r\n                <label>\r\n                    Number\r\n                    <input\r\n                        className={style.inputNumber}\r\n                        onChange={handleInputChange}\r\n                        type=\"tel\"\r\n                        name=\"number\"\r\n                        value={number}\r\n                        placeholder=\"text here\"\r\n                        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                        required\r\n                    />\r\n                </label>\r\n            </div>\r\n            <button type=\"submit\" className={style.formButton}>\r\n                Add contact\r\n            </button>\r\n            <ToastContainer autoClose={2000} />\r\n        </form>\r\n    );\r\n};\r\n\r\nContactForm.propTypes = {\r\n    onSubmit: PropTypes.func,\r\n};\r\n\r\nexport default ContactForm;\r\n","import PropTypes from 'prop-types';\r\nimport style from './ContactItem.module.css';\r\n\r\nconst ContactItem = ({ name, number, onDelete, id }) => (\r\n    <>\r\n        <span>\r\n            {name}: {number}\r\n        </span>\r\n        <button\r\n            type=\"submit\"\r\n            onClick={() => onDelete(id)}\r\n            className={style.deleteBtn}\r\n        >\r\n            Delete\r\n        </button>\r\n    </>\r\n);\r\n\r\nContactItem.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    number: PropTypes.string.isRequired,\r\n    onDelete: PropTypes.func.isRequired,\r\n    id: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default ContactItem;\r\n","import PropTypes from 'prop-types';\r\nimport ContactItem from '../ContactItem';\r\nimport style from './ContactList.module.css';\r\n\r\nconst ContactList = ({ contacts, onDeleteContact }) => (\r\n    <ol className={style.orderList}>\r\n        {contacts.map(({ id, name, number }) => (\r\n            <li key={id} className={style.contactListItem}>\r\n                <ContactItem\r\n                    name={name}\r\n                    number={number}\r\n                    id={id}\r\n                    onDelete={onDeleteContact}\r\n                />\r\n            </li>\r\n        ))}\r\n    </ol>\r\n);\r\n\r\nContactList.propTypes = {\r\n    contacts: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            id: PropTypes.string.isRequired,\r\n            name: PropTypes.string.isRequired,\r\n            number: PropTypes.string.isRequired,\r\n        }).isRequired,\r\n    ),\r\n};\r\n\r\nexport default ContactList;\r\n","import style from './Filter.module.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Filter = ({ value, onFilterChange }) => (\r\n    <div>\r\n        <label>\r\n            Find contacts by name\r\n            <input\r\n                type=\"text\"\r\n                className={style.filterInput}\r\n                value={value}\r\n                onChange={onFilterChange}\r\n            />\r\n        </label>\r\n    </div>\r\n);\r\n\r\nFilter.propTypes = {\r\n    value: PropTypes.string,\r\n    onFilterChange: PropTypes.func,\r\n};\r\n\r\nexport default Filter;\r\n","import React from 'react';\r\nimport style from './Section.module.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Section = ({ title, children }) => (\r\n    <section className={style.section}>\r\n        {title && <h2>{title}</h2>}\r\n        {children}\r\n    </section>\r\n);\r\n\r\nSection.propTypes = {\r\n    title: PropTypes.string,\r\n    children: PropTypes.node,\r\n};\r\n\r\nexport default Section;\r\n","export const getContacts = state => state.contacts.contacts;\r\nexport const getFilter = state => state.contacts.filteredContacts;\r\n\r\nexport const getFilteredContacts = state => {\r\n    const contacts = getContacts(state);\r\n    const filter = getFilter(state);\r\n\r\n    const normalizedFilteredName = filter.toLowerCase();\r\n\r\n    return contacts.filter(contact =>\r\n        contact.name.toLowerCase().includes(normalizedFilteredName),\r\n    );\r\n};\r\n","import { useDispatch, useSelector } from 'react-redux';\r\nimport ContactForm from './components/ContactForm';\r\nimport ContactList from './components/ContactList';\r\nimport Filter from './components/Filter';\r\nimport Section from './components/Section';\r\nimport { deleteContact, filterContacts } from './redux/actions';\r\nimport { getFilteredContacts, getFilter } from './redux/selectors';\r\n\r\nconst App = () => {\r\n    const contacts = useSelector(getFilteredContacts);\r\n    const filteredContacts = useSelector(getFilter);\r\n    const dispatch = useDispatch();\r\n    const onDeleteContact = id => dispatch(deleteContact(id));\r\n    const findName = event => dispatch(filterContacts(event.target.value));\r\n\r\n    return (\r\n        <div className=\"appDiv\">\r\n            <Section title=\"Phonebook\">\r\n                <ContactForm />\r\n            </Section>\r\n            <Section title=\"Contacts\">\r\n                <Filter onFilterChange={findName} value={filteredContacts} />\r\n                <ContactList\r\n                    contacts={contacts}\r\n                    onDeleteContact={onDeleteContact}\r\n                />\r\n            </Section>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import { combineReducers, createReducer } from '@reduxjs/toolkit';\r\nimport { addContact, deleteContact, filterContacts } from './actions';\r\n\r\nconst contacts = createReducer([], {\r\n    [addContact]: (state, action) => [...state, action.payload],\r\n    [deleteContact]: (state, action) =>\r\n        state.filter(contact => contact.id !== action.payload),\r\n});\r\n\r\nconst filteredContacts = createReducer('', {\r\n    [filterContacts]: (_, action) => action.payload,\r\n});\r\n\r\nexport default combineReducers({\r\n    contacts,\r\n    filteredContacts,\r\n});\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport {\r\n    persistStore,\r\n    persistReducer,\r\n    FLUSH,\r\n    PAUSE,\r\n    PERSIST,\r\n    PURGE,\r\n    REGISTER,\r\n    REHYDRATE,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport contactReducer from './reducers';\r\n\r\nconst middleware = [\r\n    ...getDefaultMiddleware({\r\n        serializableCheck: {\r\n            ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n        },\r\n    }),\r\n];\r\n\r\nconst contactsPersistConfig = {\r\n    key: 'contacts',\r\n    storage,\r\n    blacklist: ['filteredContacts'],\r\n};\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        contacts: persistReducer(contactsPersistConfig, contactReducer),\r\n    },\r\n    middleware,\r\n    devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport { store, persistor };\r\n","import 'modern-normalize/modern-normalize.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\nimport App from './App';\r\nimport './index.css';\r\nimport { persistor, store } from './redux/store';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <PersistGate loading={null} persistor={persistor}>\r\n                <App />\r\n            </PersistGate>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}